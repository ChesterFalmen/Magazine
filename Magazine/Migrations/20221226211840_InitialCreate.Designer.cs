// <auto-generated />
using System;
using Magazine.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Magazine.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221226211840_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Magazine.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ProducerId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Article");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProducerId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "Iphone 13 128 Gb Space Gray",
                            Price = 45000,
                            ProducerId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Name = "Iphone 14 256 Gb Purple",
                            Price = 56000,
                            ProducerId = 1
                        });
                });

            modelBuilder.Entity("Magazine.Models.ArticleInOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArticleId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("AllInvoices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleId = 1,
                            OrderId = 1,
                            Price = 45000
                        });
                });

            modelBuilder.Entity("Magazine.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Count = 2,
                            Name = "Phones"
                        });
                });

            modelBuilder.Entity("Magazine.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Vasyl",
                            Surname = "Yurchenko"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Taras",
                            Surname = "Andryshchak"
                        });
                });

            modelBuilder.Entity("Magazine.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Sum")
                        .HasColumnType("int");

                    b.Property<int>("UsingPromoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasCheckConstraint("Sum", "Sum > 0 AND Sum < 99999999");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Count = 1,
                            CustomerId = 1,
                            Sum = 45000,
                            UsingPromoId = 1
                        },
                        new
                        {
                            Id = 2,
                            Count = 1,
                            CustomerId = 2,
                            Sum = 56000,
                            UsingPromoId = 2
                        });
                });

            modelBuilder.Entity("Magazine.Models.Producer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Producers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Apple"
                        });
                });

            modelBuilder.Entity("Magazine.Models.Promo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sum")
                        .HasColumnType("int");

                    b.Property<int?>("UsingPromoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Promos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            Name = "NewYear2022",
                            Sum = 10,
                            UsingPromoId = 1
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            Name = "B-day",
                            Sum = 15,
                            UsingPromoId = 2
                        });
                });

            modelBuilder.Entity("Magazine.Models.UsingPromo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("PromoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PromoId")
                        .IsUnique()
                        .HasFilter("[PromoId] IS NOT NULL");

                    b.ToTable("Using_Promos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            PromoId = 1
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 2,
                            PromoId = 2
                        });
                });

            modelBuilder.Entity("Magazine.Models.Article", b =>
                {
                    b.HasOne("Magazine.Models.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Magazine.Models.Producer", "Producer")
                        .WithMany("Articles")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("Magazine.Models.ArticleInOrder", b =>
                {
                    b.HasOne("Magazine.Models.Article", "Article")
                        .WithMany("ArticleInOrders")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Magazine.Models.Order", "Order")
                        .WithMany("ArticleInOrders")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Magazine.Models.Order", b =>
                {
                    b.HasOne("Magazine.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Magazine.Models.Promo", b =>
                {
                    b.HasOne("Magazine.Models.Customer", "Customer")
                        .WithMany("Promos")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Magazine.Models.UsingPromo", b =>
                {
                    b.HasOne("Magazine.Models.Order", "Order")
                        .WithOne("UsingPromo")
                        .HasForeignKey("Magazine.Models.UsingPromo", "PromoId");

                    b.HasOne("Magazine.Models.Promo", "Promo")
                        .WithOne("UsingPromo")
                        .HasForeignKey("Magazine.Models.UsingPromo", "PromoId");

                    b.Navigation("Order");

                    b.Navigation("Promo");
                });

            modelBuilder.Entity("Magazine.Models.Article", b =>
                {
                    b.Navigation("ArticleInOrders");
                });

            modelBuilder.Entity("Magazine.Models.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Magazine.Models.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Promos");
                });

            modelBuilder.Entity("Magazine.Models.Order", b =>
                {
                    b.Navigation("ArticleInOrders");

                    b.Navigation("UsingPromo");
                });

            modelBuilder.Entity("Magazine.Models.Producer", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Magazine.Models.Promo", b =>
                {
                    b.Navigation("UsingPromo");
                });
#pragma warning restore 612, 618
        }
    }
}
